<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>File Sharing Platform</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <style>
        body.dark {
            background-color: #1a202c;
            color: #e2e8f0;
        }
        body.dark .bg-white {
            background-color: #2d3748;
            color: #e2e8f0;
        }
        .progress-bar {
            transition: width 0.5s ease-in-out;
        }
        .editable-filename {
            cursor: text;
        }
        .editable-filename input {
            display: none;
        }
        .editable-filename.editing .filename-text {
            display: none;
        }
        .editable-filename.editing input {
            display: block;
        }
    </style>
</head>
<body class="<%= theme === 'dark' ? 'dark bg-gray-900' : 'bg-gray-100' %>">
    <div class="container mx-auto px-4 py-8">
        <div class="flex justify-between items-center mb-6">
            <h1 class="text-3xl font-bold <%= theme === 'dark' ? 'text-white' : 'text-gray-800' %>">
                File Sharing Platform
            </h1>
            <div class="flex items-center space-x-4">
                <button id="themeToggle" class="bg-blue-500 text-white px-4 py-2 rounded">
                    Toggle Theme
                </button>
                <label class="block">
                    <input type="file" id="fileUpload" class="hidden" />
                    <span class="bg-green-500 text-white px-4 py-2 rounded cursor-pointer">
                        Upload File
                    </span>
                </label>
            </div>
        </div>

        <!-- Upload Progress Bar -->
        <div id="uploadProgress" class="hidden mb-4">
            <div class="bg-gray-200 rounded-full h-2.5">
                <div class="bg-blue-600 h-2.5 rounded-full progress-bar" style="width: 0%"></div>
            </div>
            <p id="uploadStatus" class="text-center mt-2"></p>
        </div>

        <!-- File List -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <% files.forEach(function(file) { %>
                <div class="bg-white shadow rounded-lg p-4 <%= theme === 'dark' ? 'bg-gray-700' : '' %> file-card">
                    <div class="mb-4">
                        <% if (file.type === 'image') { %>
                            <img src="<%= file.url %>" alt="<%= file.filename %>" 
                                 class="w-full h-48 object-cover rounded mb-4">
                        <% } else if (file.type === 'video') { %>
                            <video controls class="w-full h-48 rounded mb-4">
                                <source src="<%= file.url %>" type="video/<%= file.format %>">
                                Your browser does not support the video tag.
                            </video>
                        <% } %>
                        
                        <div class="flex justify-between items-center">
                            <div class="editable-filename w-full flex items-center">
                                <span class="filename-text truncate mr-2 flex-grow">
                                    <%= file.filename.split('/').pop() %>
                                </span>
                                <input type="text" 
                                       class="filename-input w-full px-2 py-1 border rounded" 
                                       value="<%= file.filename.split('/').pop() %>"
                                       data-original-filename="<%= file.filename %>"
                                >
                                <button class="edit-filename ml-2 text-blue-500 hover:text-blue-700">
                                    <i class="fas fa-edit"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="flex justify-between items-center">
                        <div class="text-sm text-gray-500">
                            Size: <%= (file.bytes / 1024 / 1024).toFixed(2) %> MB
                        </div>
                        <div class="flex space-x-2">
                            <a href="<%= file.url %>" 
                               target="_blank" 
                               class="text-blue-500 hover:text-blue-700">
                                <i class="fas fa-eye"></i>
                            </a>
                            <a href="<%= file.url %>" 
                               download 
                               class="text-green-500 hover:text-green-700">
                                <i class="fas fa-download"></i>
                            </a>
                            <a href="/delete/<%= file.filename %>" 
                               onclick="return confirm('Are you sure you want to delete this file?');" 
                               class="text-red-500 hover:text-red-700">
                                <i class="fas fa-trash"></i>
                            </a>
                        </div>
                    </div>
                </div>
            <% }); %>
        </div>
    </div>

    <script>
        // In-place filename editing
        document.querySelectorAll('.editable-filename').forEach(container => {
            const filenameText = container.querySelector('.filename-text');
            const filenameInput = container.querySelector('.filename-input');
            const editButton = container.querySelector('.edit-filename');

            // Toggle editing mode
            editButton.addEventListener('click', () => {
                container.classList.toggle('editing');
                filenameInput.focus();
                filenameInput.select();
            });

            // Handle filename input blur (lose focus)
            filenameInput.addEventListener('blur', () => {
                const originalFilename = filenameInput.dataset.originalFilename;
                const newFilename = filenameInput.value.trim();

                if (newFilename && newFilename !== originalFilename.split('/').pop()) {
                    // Send rename request
                    axios.post('/rename', {
                        oldFilename: originalFilename,
                        newFilename: newFilename
                    })
                    .then(response => {
                        if (response.data.success) {
                            filenameText.textContent = newFilename;
                            filenameInput.dataset.originalFilename = response.data.newFilename;
                            container.classList.remove('editing');
                            window.location.reload(); // Refresh to reflect changes
                        }
                    })
                    .catch(error => {
                        console.error('Rename error:', error);
                        alert('Failed to rename file');
                    });
                } else {
                    container.classList.remove('editing');
                }
            });

            // Handle Enter key for renaming
            filenameInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    filenameInput.blur();
                }
            });
        });

        document.addEventListener('DOMContentLoaded', () => {
    // Share Link Generation
    function generateShareLink() {
        // Collect selected files
        const selectedFiles = Array.from(
            document.querySelectorAll('input[name="fileSelect"]:checked')
        ).map(checkbox => checkbox.value);

        if (selectedFiles.length === 0) {
            alert('Please select at least one file to share');
            return;
        }

        // Send request to generate share link
        axios.post('/create-share', { files: selectedFiles })
            .then(response => {
                // Create shareable URL
                const shareUrl = `${window.location.origin}/share/${response.data.shareLink}`;
                
                // Create a modal or popup to display the share link
                const shareModal = document.createElement('div');
                shareModal.classList.add(
                    'fixed', 'inset-0', 'bg-black', 'bg-opacity-50', 
                    'flex', 'items-center', 'justify-center', 'z-50'
                );
                
                shareModal.innerHTML = `
                    <div class="bg-white p-6 rounded-lg shadow-xl max-w-md w-full">
                        <h2 class="text-xl font-bold mb-4">Share Link Generated</h2>
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700">
                                Shareable Link
                            </label>
                            <div class="mt-1 flex rounded-md shadow-sm">
                                <input type="text" 
                                       id="shareLinkInput" 
                                       value="${shareUrl}" 
                                       readonly 
                                       class="flex-1 block w-full rounded-md border-gray-300 px-3 py-2"
                                >
                                <button id="copyShareLinkBtn" class="ml-2 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                    Copy
                                </button>
                            </div>
                        </div>
                        <button id="closeShareModalBtn" class="w-full bg-gray-200 text-gray-800 py-2 rounded-md hover:bg-gray-300">
                            Close
                        </button>
                    </div>
                `;

                // Add to body
                document.body.appendChild(shareModal);

                // Copy link functionality
                const copyBtn = shareModal.querySelector('#copyShareLinkBtn');
                const shareInput = shareModal.querySelector('#shareLinkInput');
                
                copyBtn.addEventListener('click', () => {
                    shareInput.select();
                    document.execCommand('copy');
                    copyBtn.textContent = 'Copied!';
                    setTimeout(() => {
                        copyBtn.textContent = 'Copy';
                    }, 2000);
                });

                // Close modal functionality
                const closeBtn = shareModal.querySelector('#closeShareModalBtn');
                closeBtn.addEventListener('click', () => {
                    document.body.removeChild(shareModal);
                });

                // Close modal when clicking outside
                shareModal.addEventListener('click', (e) => {
                    if (e.target === shareModal) {
                        document.body.removeChild(shareModal);
                    }
                });
            })
            .catch(error => {
                console.error('Share link generation error:', error);
                alert('Failed to generate share link');
            });
    }

    // Add checkbox to each file card
    const fileCards = document.querySelectorAll('.file-card');
    fileCards.forEach(card => {
        const filename = card.querySelector('.filename-text').textContent.trim();
        
        const checkboxContainer = document.createElement('div');
        checkboxContainer.classList.add('absolute', 'top-2', 'right-2');
        
        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.name = 'fileSelect';
        checkbox.value = filename;
        checkbox.classList.add('form-checkbox', 'h-5', 'w-5', 'text-blue-600');
        
        checkboxContainer.appendChild(checkbox);
        card.style.position = 'relative';
        card.appendChild(checkboxContainer);
    });

    // Add Share Button to the page
    const actionContainer = document.querySelector('.flex.justify-between.items-center');
    if (actionContainer) {
        const shareButton = document.createElement('button');
        shareButton.textContent = 'Generate Share Link';
        shareButton.classList.add(
            'bg-purple-500', 
            'text-white', 
            'px-4', 
            'py-2', 
            'rounded', 
            'hover:bg-purple-600'
        );
        shareButton.addEventListener('click', generateShareLink);
        actionContainer.appendChild(shareButton);
    }
});
        // Theme Toggle
        document.getElementById('themeToggle').addEventListener('click', () => {
            const body = document.body;
            const currentTheme = body.classList.contains('dark') ? 'dark' : 'light';
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            
            // Update URL to persist theme
            const url = new URL(window.location.href);
            url.searchParams.set('theme', newTheme);
            window.history.pushState({}, '', url);
            
            // Toggle theme classes
            body.classList.toggle('dark');
            body.classList.toggle('bg-gray-900');
            body.classList.toggle('bg-gray-100');
        });

        // File Upload with Progress
        const fileUpload = document.getElementById('fileUpload');
        const uploadProgress = document.getElementById('uploadProgress');
        const progressBar = uploadProgress.querySelector('.progress-bar');
        const uploadStatus = document.getElementById('uploadStatus');

        fileUpload.addEventListener('change', (event) => {
            const file = event.target.files[0];
            const formData = new FormData();
            formData.append('file', file);

            // Show progress bar
            uploadProgress.classList.remove('hidden');
            progressBar.style.width = '0%';
            uploadStatus.textContent = 'Uploading...';

            axios.post('/upload', formData, {
                onUploadProgress: (progressEvent) => {
                    const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);
                    progressBar.style.width = `${percentCompleted}%`;
                    uploadStatus.textContent = `${percentCompleted}% Uploaded`;
                }
            })
            .then(() => {
                uploadStatus.textContent = 'Upload Complete!';
                setTimeout(() => {
                    window.location.reload();
                }, 1500);
            })
            .catch((error) => {
                uploadStatus.textContent = 'Upload Failed';
                console.error('Upload error:', error);
            });
        });
       // Share Files Functionality
        const shareModal = document.getElementById('shareModal');
        const selectedFilesList = document.getElementById('selectedFilesList');
        const generateShareLinkBtn = document.getElementById('generateShareLink');
        const shareLinkResult = document.getElementById('shareLinkResult');
        const shareLinkInput = document.getElementById('shareLink');

        generateShareLinkBtn.addEventListener('click', () => {
            const selectedFiles = Array.from(
                document.querySelectorAll('input[name="fileSelect"]:checked')
            ).map(checkbox => checkbox.value);

            if (selectedFiles.length === 0) {
                alert('Please select files to share');
                return;
            }

            fetch('/create-share', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ files: selectedFiles })
            })
            .then(response => response.json())
            .then(data => {
                
                // Continued from previous script...
        const shareUrl = `${window.location.origin}/share/${data.shareLink}`;
        
        shareLinkInput.value = shareUrl;
        shareLinkResult.classList.remove('hidden');
    })
    .catch(error => {
        console.error('Share link generation error:', error);
        alert('Failed to generate share link');
    });
});

// Copy Share Link Function
function copyShareLink() {
    shareLinkInput.select();
    document.execCommand('copy');
    alert('Share link copied to clipboard!');
}

// Checkbox selection for sharing
document.addEventListener('DOMContentLoaded', () => {
    const fileCards = document.querySelectorAll('.bg-white');
    
    fileCards.forEach(card => {
        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.name = 'fileSelect';
        checkbox.value = card.querySelector('.truncate').textContent;
        checkbox.classList.add('mr-2');
        
        card.querySelector('.flex.justify-between.items-center').prepend(checkbox);
    });

    // Share Files Button
    const shareFilesBtn = document.createElement('button');
    shareFilesBtn.textContent = 'Share Selected Files';
    shareFilesBtn.classList.add(
        'bg-purple-500', 
        'text-white', 
        'px-4', 
        'py-2', 
        'rounded', 
        'mt-4'
    );
    shareFilesBtn.addEventListener('click', () => {
        shareModal.classList.remove('hidden');
        shareModal.classList.add('flex');

        // Clear previous selections
        selectedFilesList.innerHTML = '';

        // Show selected files in modal
        const selectedFiles = Array.from(
            document.querySelectorAll('input[name="fileSelect"]:checked')
        );

        if (selectedFiles.length === 0) {
            alert('Please select files to share');
            return;
        }

        selectedFiles.forEach(file => {
            const fileItem = document.createElement('div');
            fileItem.textContent = file.value;
            fileItem.classList.add('bg-gray-100', 'p-2', 'rounded', 'mb-2');
            selectedFilesList.appendChild(fileItem);
        });
    });

    // Close Share Modal
    shareModal.addEventListener('click', (e) => {
        if (e.target === shareModal) {
            shareModal.classList.add('hidden');
            shareModal.classList.remove('flex');
        }
    });

    // Add Share Files Button to page
    const actionContainer = document.querySelector('.flex.justify-between.items-center');
    if (actionContainer) {
        actionContainer.appendChild(shareFilesBtn);
    }

    // Handle URL Parameters for Notifications
    const urlParams = new URLSearchParams(window.location.search);
    
    const notifications = {
        uploadSuccess: {
            message: 'File uploaded successfully!',
            type: 'success'
        },
        uploadError: {
            message: 'File upload failed.',
            type: 'error'
        },
        deleteSuccess: {
            message: 'File deleted successfully!',
            type: 'success'
        },
        deleteError: {
            message: 'File deletion failed.',
            type: 'error'
        },
        renameSuccess: {
            message: 'File renamed successfully!',
            type: 'success'
        },
        renameError: {
            message: 'File rename failed.',
            type: 'error'
        }
    };

    // Create and show notification
    function showNotification(message, type = 'info') {
        const notificationContainer = document.createElement('div');
        notificationContainer.classList.add(
            'fixed', 'top-4', 'right-4', 'p-4', 'rounded', 'shadow-lg', 'z-50',
            type === 'success' ? 'bg-green-500 text-white' : 'bg-red-500 text-white'
        );
        notificationContainer.textContent = message;

        document.body.appendChild(notificationContainer);

        // Remove notification after 3 seconds
        setTimeout(() => {
            document.body.removeChild(notificationContainer);
        }, 3000);
    }

    // Check for notifications
    for (const [param, config] of Object.entries(notifications)) {
        if (urlParams.has(param)) {
            showNotification(config.message, config.type);
            // Remove the parameter from URL
            urlParams.delete(param);
            const newUrl = window.location.pathname + 
                (urlParams.toString() ? `?${urlParams.toString()}` : '');
            window.history.replaceState({}, '', newUrl);
        }
    }
});
    </script>

    </body>
    </html>